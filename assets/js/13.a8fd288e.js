(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{444:function(v,_,t){"use strict";t.r(_);var a=t(16),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"探讨继承封装与多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#探讨继承封装与多态"}},[v._v("#")]),v._v(" 探讨继承封装与多态")]),v._v(" "),t("blockquote",[t("p",[v._v("面向对象的三个基本特征是：封装、继承、多态。")])]),v._v(" "),t("p",[v._v("我们知道，"),t("strong",[v._v("封装可以隐藏实现细节")]),v._v("，使得代码模块化；"),t("strong",[v._v("继承可以扩展已存在的代码模块（类）")]),v._v("；它们的目的都是："),t("strong",[v._v("代码重用")]),v._v("。而多态则是为了实现另一个目的——"),t("strong",[v._v("接口重用")]),v._v("！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。")]),v._v(" "),t("h2",{attrs:{id:"封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[v._v("#")]),v._v(" 封装")]),v._v(" "),t("p",[v._v("封装从字面上来理解就是包装的意思，专业点就是信息隐藏，是指利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体，数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。系统的其他对象只能通过包裹在数据外面的已经授权的操作来与这个封装的对象进行交流和交互。也就是说用户是无需知道对象内部的细节，但可以通过该对象对外的提供的接口来访问该对象。")]),v._v(" "),t("blockquote",[t("p",[v._v("将对象中的属性私有化，再暴露一些接口给外部使用；将相似的功能封装成一个模块，如maven包管理；")])]),v._v(" "),t("h2",{attrs:{id:"继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[v._v("#")]),v._v(" 继承")]),v._v(" "),t("p",[v._v("继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码，能够大大的提高开发的效率。")]),v._v(" "),t("blockquote",[t("ol",[t("li",[v._v("子类拥有父类非private的属性和方法。")]),v._v(" "),t("li",[v._v("子类可以拥有自己属性和方法，即子类可以对父类进行扩展。")]),v._v(" "),t("li",[v._v("子类可以用自己的方式实现父类的方法。（以后介绍）。")]),v._v(" "),t("li",[v._v("构造器不能够被继承，但可以通过 super() 调用。")]),v._v(" "),t("li",[t("strong",[v._v("谨慎继承")]),v._v(" "),t("ol",[t("li",[v._v("父类变，子类就必须变。")]),v._v(" "),t("li",[v._v("继承破坏了封装，对于父类而言，它的实现细节对与子类来说都是透明的。")]),v._v(" "),t("li",[v._v("继承是一种强耦合关系。")])])])])]),v._v(" "),t("h2",{attrs:{id:"多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[v._v("#")]),v._v(" 多态")]),v._v(" "),t("p",[v._v("所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。")]),v._v(" "),t("p",[v._v("对于面向对象而言，"),t("strong",[v._v("多态分为编译时多态和运行时多态")]),v._v("。其中编辑时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编辑之后会变成两个不同的函数，在运行时谈不上多态。而运行时多态是动态的，它是通过动态绑定来实现的，也就是我们所说的多态性，如向上转型，编译时看左侧父类，运行时看右侧子类。")]),v._v(" "),t("blockquote",[t("p",[v._v("函数重载属于一种多态：特设多态。特设多态的意思是，一个函数有有限数量的多种不同的实现，依赖参数的类型来选择调用特定版本的函数实现。这种选择在编译期就可以判断，所以称为静态多态。")])]),v._v(" "),t("h3",{attrs:{id:"实现条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现条件"}},[v._v("#")]),v._v(" 实现条件")]),v._v(" "),t("p",[v._v("Java实现多态有三个必要条件**：继承、重写、向上转型。**")]),v._v(" "),t("ol",[t("li",[v._v("**继承：**在多态中必须存在有继承关系的子类和父类。")]),v._v(" "),t("li",[v._v("**重写：**子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。")]),v._v(" "),t("li",[v._v("**向上转型：**在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。")])]),v._v(" "),t("h3",{attrs:{id:"实现形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现形式"}},[v._v("#")]),v._v(" 实现形式")]),v._v(" "),t("p",[v._v("在Java中有两种形式可以实现多态：继承和接口。")]),v._v(" "),t("h4",{attrs:{id:"基于继承实现的多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于继承实现的多态"}},[v._v("#")]),v._v(" 基于继承实现的多态")]),v._v(" "),t("p",[v._v("基于继承的实现机制主要表现在父类和继承该父类的一个或多个子类对某些方法的重写，多个子类对同一方法的重写可以表现出不同的行为。")]),v._v(" "),t("p",[v._v("基于继承实现的多态可以总结如下：对于引用子类的父类类型，在处理该引用时，它适用于继承该父类的所有子类，子类对象的不同，对方法的实现也就不同，执行相同动作产生的行为也就不同。")]),v._v(" "),t("p",[v._v("如果父类是抽象类，那么子类必须要实现父类中所有的抽象方法，这样该父类所有的子类一定存在统一的对外接口，但其内部的具体实现可以各异。这样我们就可以使用顶层类提供的统一接口来处理该层次的方法。")]),v._v(" "),t("h4",{attrs:{id:"基于接口实现的多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于接口实现的多态"}},[v._v("#")]),v._v(" 基于接口实现的多态")]),v._v(" "),t("p",[v._v("继承是通过重写父类的同一方法的几个不同子类来体现的，那么就可就是通过实现接口并覆盖接口中同一方法的几不同的类体现的。")]),v._v(" "),t("p",[v._v("在接口的多态中，指向接口的引用必须是指定这实现了该接口的一个类的实例程序，在运行时，根据对象引用的实际类型来执行对应的方法。")]),v._v(" "),t("p",[v._v("继承都是单继承，只能为一组相关的类提供一致的服务接口。但是接口可以是多继承多实现，它能够利用一组相关或者不相关的接口进行组合与扩充，能够对外提供一致的服务接口。所以它相对于继承来说有更好的灵活性。")])])}),[],!1,null,null,null);_.default=r.exports}}]);