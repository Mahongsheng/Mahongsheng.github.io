(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{457:function(e,n,o){"use strict";o.r(n);var v=o(16),r=Object(v.a)({},(function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"mongodb的分布式一致性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mongodb的分布式一致性"}},[e._v("#")]),e._v(" MongoDB的分布式一致性")]),e._v(" "),o("p",[e._v("一致性是一个复杂的话题，而一致性更多从应用角度上提出的，比如：")]),e._v(" "),o("blockquote",[o("p",[e._v("向系统写入一条数据，应该能够马上读到写入的这个数据。")])]),e._v(" "),o("p",[e._v("在分布式架构的CAP理论以及许多延续的观点中提到，由于网络分区的存在，要求系统在一致性和可用性之间做出选择，而不能两者兼得。")]),e._v(" "),o("p",[e._v("在MongoDB 中，允许客户端为其操作设定一定的级别或者偏好，包括：")]),e._v(" "),o("ul",[o("li",[e._v("Read Preference\n读取偏好，可指定读主节点、读备节点，或者是优先读主、优先读备、取最近的节点")]),e._v(" "),o("li",[e._v("Read Concern\n读关注，指定读取的数据版本处于怎样的状态，可以为读本地、读大多数节点写入，或者是线性读(linearizable)等等")]),e._v(" "),o("li",[e._v("Write Concern\n写关注，指定写入结果达到什么状态时才返回，可以为无应答(none)、应答(ack)，或者是大多数节点完成了数据复制等等")])]),e._v(" "),o("p",[e._v("使用不同的设定将会产生对于C(一致性)、A(可用性)的不同的抉择，比如：")]),e._v(" "),o("ul",[o("li",[e._v("将读偏好设置为 primary，此时读写都在主节点上。 这保证了数据的一致性，但一旦主节点宕机会导致失败(可用性降低)")]),e._v(" "),o("li",[e._v("将读偏好设置为 Secondary Prefered，此时写主，优先读备，可用性提高了，但数据存在延迟(出现不一致)")]),e._v(" "),o("li",[e._v("将读写关注都设置为 Majority(大多数)，一致性提升了，但可用性也同时降低了(节点失效会导致大多数写失败)")])]),e._v(" "),o("p",[e._v("关于这种权衡的讨论会一直存在，而 MongoDB 除了提供多样化的选择之外，其主要是通过复制、基于心跳的自动"),o("code",[e._v("fail over")]),e._v("等机制来降低系统发生故障时产生的影响，从而提升整体的可用性。")])])}),[],!1,null,null,null);n.default=r.exports}}]);