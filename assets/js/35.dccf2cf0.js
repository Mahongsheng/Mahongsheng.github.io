(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{466:function(v,_,t){"use strict";t.r(_);var a=t(16),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"什么是操作系统内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是操作系统内核"}},[v._v("#")]),v._v(" 什么是操作系统内核？")]),v._v(" "),t("h2",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[v._v("#")]),v._v(" 定义")]),v._v(" "),t("p",[v._v("“内核”指的是一个提供硬件抽象层、磁盘以及文件系统控制、多任务等功能的系统软件。内核是操作系统最基本的部分，它为众多应用程序提供对计算机硬件的安全访问，这种访问是有限的，并且内核决定一个程序在什么时候对某部分硬件操作多长时间。")]),v._v(" "),t("p",[v._v("因为直接对硬件操作是非常复杂的，所以内核通常提供一种硬件抽象的方法来完成这些操作。硬件抽象隐藏了复杂性，为应用软件和硬件提供了一套简洁统一的接口，使得程序设计更加简单。")]),v._v(" "),t("p",[t("strong",[v._v("简单来说，它是操作系统的核心。负责管理：进程、内存、设备驱动程序、文件以及网络系统等等，决定着系统的性能和稳定性。是连接应用程序和硬件的桥梁。")])]),v._v(" "),t("h2",{attrs:{id:"内核的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内核的分类"}},[v._v("#")]),v._v(" 内核的分类")]),v._v(" "),t("p",[v._v("主要分为四类：")]),v._v(" "),t("ol",[t("li",[v._v("宏内核")]),v._v(" "),t("li",[v._v("微内核")]),v._v(" "),t("li",[v._v("混合内核")]),v._v(" "),t("li",[v._v("外内核")])]),v._v(" "),t("h3",{attrs:{id:"宏内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏内核"}},[v._v("#")]),v._v(" 宏内核")]),v._v(" "),t("p",[v._v("我们上面说到，内核管理着操作系统的内存，文件，IO，网络等等，每个功能可以看做一个模块，在宏内核中，这些模块都是集成在一起的，运行在内核进程中，模块之间的交互直接通过方法调用。")]),v._v(" "),t("h3",{attrs:{id:"微内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微内核"}},[v._v("#")]),v._v(" 微内核")]),v._v(" "),t("p",[v._v("而在微内核中，内核只提供最核心的功能，比如任务调度，内存管理等等，其他模块被移出内核，运行在不同的进程中，这样即使某一个模块出现问题，只要重启这个模块的进程即可，不会影响到其他模块，稳定性大大增加。甚至可以在系统运行过程中替换现有模块的实现。而且由于模块独立的性质，可以做到模块的按需加载。但是模块间的相互调用需要通过进程间通信，通信效率相对较低。")]),v._v(" "),t("p",[v._v("优点就是解耦以及更稳定，缺点就是进程间通信效率较低。")]),v._v(" "),t("h3",{attrs:{id:"混合内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#混合内核"}},[v._v("#")]),v._v(" 混合内核")]),v._v(" "),t("p",[v._v("我们上面看了宏内核和微内核的实现，就会发现，两者各有千秋，也各有缺点，所以混合内核就是集中了两者的特点，让微内核中的一些核心模块运行在内核中，从而使内核效率更高一些。")]),v._v(" "),t("h3",{attrs:{id:"外内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外内核"}},[v._v("#")]),v._v(" 外内核")]),v._v(" "),t("p",[v._v("外内核是把硬件暴露给应用程序，应用程序可以直接访问硬件，外内核对系统提供保护。目前还在研究阶段。")]),v._v(" "),t("h2",{attrs:{id:"宏内核与微内核比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏内核与微内核比较"}},[v._v("#")]),v._v(" 宏内核与微内核比较")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th"),v._v(" "),t("th",[v._v("宏内核")]),v._v(" "),t("th",[v._v("微内核")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("通信效率")]),v._v(" "),t("td",[v._v("高（函数调用）")]),v._v(" "),t("td",[v._v("低（进程间通信）")])]),v._v(" "),t("tr",[t("td",[v._v("稳定性")]),v._v(" "),t("td",[v._v("低（模块集成在一起）")]),v._v(" "),t("td",[v._v("高（模块间互相不受影响）")])]),v._v(" "),t("tr",[t("td",[v._v("扩展性")]),v._v(" "),t("td",[v._v("低（模块集成在一起）")]),v._v(" "),t("td",[v._v("高（模块间互相不受影响）")])]),v._v(" "),t("tr",[t("td",[v._v("代码量")]),v._v(" "),t("td",[v._v("多（需要实现所有模块）")]),v._v(" "),t("td",[v._v("少（只需要实现核心模块）")])])])]),v._v(" "),t("h2",{attrs:{id:"当前主流操作系统内核类别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当前主流操作系统内核类别"}},[v._v("#")]),v._v(" 当前主流操作系统内核类别")]),v._v(" "),t("ol",[t("li",[v._v("宏内核\n"),t("ol",[t("li",[v._v("Linux")]),v._v(" "),t("li",[v._v("Windows 9X 系列")]),v._v(" "),t("li",[v._v("MacOS 8.6 版本之前")])])]),v._v(" "),t("li",[v._v("微内核\n"),t("ol",[t("li",[v._v("Fuchsia")]),v._v(" "),t("li",[v._v("鸿蒙")]),v._v(" "),t("li",[v._v("Mnix")])])]),v._v(" "),t("li",[v._v("混合内核\n"),t("ol",[t("li",[v._v("Windows XP")]),v._v(" "),t("li",[v._v("Windows 7")]),v._v(" "),t("li",[v._v("Mac OS X")]),v._v(" "),t("li",[v._v("XNU")])])]),v._v(" "),t("li",[v._v("外内核\n"),t("ol",[t("li",[v._v("Nemesis")])])])])])}),[],!1,null,null,null);_.default=s.exports}}]);