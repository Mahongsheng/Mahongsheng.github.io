(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{448:function(_,t,v){"use strict";v.r(t);var r=v(16),a=Object(r.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"_1-概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[_._v("#")]),_._v(" 1. 概述")]),_._v(" "),v("p",[_._v("官方：数据库连接池是程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由程序动态地对池中的连接进行申请、使用与释放。")]),_._v(" "),v("h2",{attrs:{id:"_2-为什么要使用连接池"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么要使用连接池"}},[_._v("#")]),_._v(" 2. 为什么要使用连接池")]),_._v(" "),v("p",[_._v("在一次完整的网络请求中，其性能瓶颈常常发生于数据库的连接与数据的获取。数据库连接是一种关键的有限的昂贵的资源，一个数据库连接对象均对应一个物理数据库连接，每次操作数据库时都打开一个物理连接，使用完关闭连接，这种频繁的开关数据库连接会造成系统的性能低下。")]),_._v(" "),v("p",[_._v("数据库连接池技术尽可能多地重用了消耗内存的资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，同时，我们可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。")]),_._v(" "),v("h2",{attrs:{id:"_3-传统的连接机制与数据库连接池运行机制区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-传统的连接机制与数据库连接池运行机制区别"}},[_._v("#")]),_._v(" 3. 传统的连接机制与数据库连接池运行机制区别")]),_._v(" "),v("h3",{attrs:{id:"_3-1-传统连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-传统连接"}},[_._v("#")]),_._v(" 3.1 传统连接")]),_._v(" "),v("p",[_._v("下面以访问MySQL为例，执行一个SQL命令，如果不使用连接池，需要经过哪些流程：")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://imgtu.com/i/4W3P00",target:"_blank",rel:"noopener noreferrer"}},[v("img",{attrs:{src:"https://z3.ax1x.com/2021/09/28/4W3P00.png",alt:"4W3P00.png"}}),v("OutboundLink")],1)]),_._v(" "),v("p",[_._v("不使用数据库连接池的步骤：")]),_._v(" "),v("ol",[v("li",[_._v("TCP建立连接的三次握手")]),_._v(" "),v("li",[_._v("MySQL认证的三次握手")]),_._v(" "),v("li",[_._v("真正的SQL执行")]),_._v(" "),v("li",[_._v("MySQL的关闭")]),_._v(" "),v("li",[_._v("TCP的四次握手关闭")])]),_._v(" "),v("p",[_._v("可以看到，为了执行一条SQL，却多了非常多网络交互。")]),_._v(" "),v("p",[v("strong",[_._v("优点：")])]),_._v(" "),v("ul",[v("li",[_._v("实现简单")])]),_._v(" "),v("p",[v("strong",[_._v("缺点：")])]),_._v(" "),v("ul",[v("li",[_._v("网络IO较多")]),_._v(" "),v("li",[_._v("数据库的负载较高")]),_._v(" "),v("li",[_._v("响应时间较长及QPS较低")]),_._v(" "),v("li",[_._v("应用频繁的创建连接和关闭连接，导致临时对象较多，GC频繁")]),_._v(" "),v("li",[_._v("在关闭连接后，会出现大量TIME_WAIT 的TCP状态（在2个MSL之后关闭）")])]),_._v(" "),v("h3",{attrs:{id:"_3-2-数据库连接池"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-数据库连接池"}},[_._v("#")]),_._v(" 3.2 数据库连接池")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://imgtu.com/i/4W3i7V",target:"_blank",rel:"noopener noreferrer"}},[v("img",{attrs:{src:"https://z3.ax1x.com/2021/09/28/4W3i7V.png",alt:"4W3i7V.png"}}),v("OutboundLink")],1)]),_._v(" "),v("p",[_._v("第一次访问的时候，需要建立连接。 但是之后的访问，均会复用之前创建的连接，直接执行SQL语句。")]),_._v(" "),v("p",[_._v("优点：")]),_._v(" "),v("ul",[v("li",[_._v("较少了网络开销")]),_._v(" "),v("li",[_._v("系统的性能会有一个实质的提升")]),_._v(" "),v("li",[_._v("没了麻烦的TIME_WAIT状态")])]),_._v(" "),v("h2",{attrs:{id:"_4-工作原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-工作原理"}},[_._v("#")]),_._v(" 4. 工作原理")]),_._v(" "),v("p",[_._v("连接池的工作原理主要由三部分组成，分别为")]),_._v(" "),v("ul",[v("li",[_._v("连接池的建立")]),_._v(" "),v("li",[_._v("连接池中连接的使用管理")]),_._v(" "),v("li",[_._v("连接池的关闭")])]),_._v(" "),v("h3",{attrs:{id:"_4-1-连接池的建立。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-连接池的建立。"}},[_._v("#")]),_._v(" 4.1 连接池的建立。")]),_._v(" "),v("p",[_._v("一般在系统初始化时，连接池会根据系统配置建立，并在池中创建了几个连接对象，以便使用时能从连接池中获取。连接池中的连接不能随意创建和关闭，这样避免了连接随意建立和关闭造成的系统开销。")]),_._v(" "),v("p",[_._v("Java中提供了很多容器类可以方便的构建连接池，例如Vector、Stack等。")]),_._v(" "),v("h3",{attrs:{id:"_4-2-连接池的管理。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-连接池的管理。"}},[_._v("#")]),_._v(" 4.2 连接池的管理。")]),_._v(" "),v("p",[_._v("连接池管理策略是连接池机制的核心，连接池内连接的分配和释放对系统的性能有很大的影响。其管理策略是：")]),_._v(" "),v("p",[_._v("当客户请求数据库连接时，首先查看连接池中是否有空闲连接，如果存在空闲连接，则将连接分配给客户使用；如果没有空闲连接，则查看当前所开的连接数是否已经达到最大连接数，如果没达到就重新创建一个连接给请求的客户；如果达到就按设定的最大等待时间进行等待，如果超出最大等待时间，则抛出异常给客户。")]),_._v(" "),v("p",[_._v("当客户释放数据库连接时，先判断该连接的引用次数是否超过了规定值，如果超过就从连接池中删除该连接，否则保留为其他客户服务。")]),_._v(" "),v("p",[_._v("该策略保证了数据库连接的有效复用，避免频繁的建立、释放连接所带来的系统资源开销。")]),_._v(" "),v("h3",{attrs:{id:"_4-3-连接池的关闭。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-连接池的关闭。"}},[_._v("#")]),_._v(" 4.3 连接池的关闭。")]),_._v(" "),v("p",[_._v("当应用程序退出时，关闭连接池中所有的连接，释放连接池相关的资源，该过程正好与创建相反。")]),_._v(" "),v("h2",{attrs:{id:"_5-数据库连接池的大小"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据库连接池的大小"}},[_._v("#")]),_._v(" 5. 数据库连接池的大小？")]),_._v(" "),v("p",[v("strong",[_._v("连接数 = （（核心数 * 2） + 有效磁盘数）")]),_._v("（机械硬盘）")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://blog.csdn.net/weixin_44763987/article/details/106638386",target:"_blank",rel:"noopener noreferrer"}},[_._v("数据库连接池大小多少合适？"),v("OutboundLink")],1)]),_._v(" "),v("p",[v("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing",target:"_blank",rel:"noopener noreferrer"}},[_._v("英文原文"),v("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);